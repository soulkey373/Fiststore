#pragma checksum "C:\Users\tyler\Desktop\backstorage\Backstage\Views\Order\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5503039c10b599ecacd42fcdc46bc92892b3a561"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Order_Index), @"mvc.1.0.view", @"/Views/Order/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\tyler\Desktop\backstorage\Backstage\Views\_ViewImports.cshtml"
using Backstage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\tyler\Desktop\backstorage\Backstage\Views\_ViewImports.cshtml"
using Backstage.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\tyler\Desktop\backstorage\Backstage\Views\_ViewImports.cshtml"
using Backstage.ViewModels;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5503039c10b599ecacd42fcdc46bc92892b3a561", @"/Views/Order/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ad07dbd786e43181f8694f545a580a0222c23d35", @"/Views/_ViewImports.cshtml")]
    public class Views_Order_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute(":value", new global::Microsoft.AspNetCore.Html.HtmlString("false"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute(":value", new global::Microsoft.AspNetCore.Html.HtmlString("true"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"

<div id=""app"">
    <b-container fluid>
        <!-- User Interface controls -->
        <b-row>
            <b-col lg=""6"" class=""my-1"">
                <b-form-group label=""分類""
                              label-for=""sort-by-select""
                              label-cols-sm=""3""
                              label-align-sm=""right""
                              label-size=""sm""
                              class=""mb-0""
                              v-slot=""{ ariaDescribedby }"">
                    <b-input-group size=""sm"">
                        <b-form-select id=""sort-by-select""
                                       v-model=""sortBy""
                                       :options=""sortOptions""
                                       :aria-describedby=""ariaDescribedby""
                                       class=""w-75"">
                            <template #first>
                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5503039c10b599ecacd42fcdc46bc92892b3a5615163", async() => {
                WriteLiteral("-- none --");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                            </template>
                        </b-form-select>

                        <b-form-select v-model=""sortDesc""
                                       :disabled=""!sortBy""
                                       :aria-describedby=""ariaDescribedby""
                                       size=""sm""
                                       class=""w-25"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5503039c10b599ecacd42fcdc46bc92892b3a5616747", async() => {
                WriteLiteral("升序");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5503039c10b599ecacd42fcdc46bc92892b3a5617812", async() => {
                WriteLiteral("降序");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </b-form-select>
                    </b-input-group>
                </b-form-group>
            </b-col>

            <b-col lg=""6"" class=""my-1"">
                <b-form-group label=""初始分類""
                              label-for=""initial-sort-select""
                              label-cols-sm=""3""
                              label-align-sm=""right""
                              label-size=""sm""
                              class=""mb-0"">
                    <b-form-select id=""initial-sort-select""
                                   v-model=""sortDirection""
                                   :options=""['asc', 'desc', 'last']""
                                   size=""sm""></b-form-select>
                </b-form-group>
            </b-col>

            <b-col lg=""6"" class=""my-1"">
                <b-form-group label=""搜尋""
                              label-for=""filter-input""
                              label-cols-sm=""3""
                              label-align-");
            WriteLiteral(@"sm=""right""
                              label-size=""sm""
                              class=""mb-0"">
                    <b-input-group size=""sm"">
                        <b-form-input id=""filter-input""
                                      v-model=""filter""
                                      type=""search""
                                      placeholder=""請輸入關鍵字""></b-form-input>

                        <b-input-group-append>
                            <b-button :disabled=""!filter"" ");
            WriteLiteral(@"@click=""filter = ''"">清空</b-button>
                        </b-input-group-append>
                    </b-input-group>
                </b-form-group>
            </b-col>

            <b-col lg=""6"" class=""my-1"">
                <b-form-group v-model=""sortDirection""
                              label=""過濾條件""
                              label-cols-sm=""3""
                              label-align-sm=""right""
                              label-size=""sm""
                              class=""mb-0""
                              v-slot=""{ ariaDescribedby }"">
                    <b-form-checkbox-group v-model=""filterOn""
                                           :aria-describedby=""ariaDescribedby""
                                           class=""mt-1"">
                        <b-form-checkbox value=""orderID"">訂單編號</b-form-checkbox>
                        <b-form-checkbox value=""fullName"">會員名稱</b-form-checkbox>
                        <b-form-checkbox value=""orderStatusID"">付款狀態</b-form-checkbox>");
            WriteLiteral(@"
                    </b-form-checkbox-group>
                </b-form-group>
            </b-col>

            <b-col sm=""5"" md=""6"" class=""my-1"">
                <b-form-group label=""每頁顯示筆數""
                              label-for=""per-page-select""
                              label-cols-sm=""6""
                              label-cols-md=""4""
                              label-cols-lg=""3""
                              label-align-sm=""right""
                              label-size=""sm""
                              class=""mb-0"">
                    <b-form-select id=""per-page-select""
                                   v-model=""perPage""
                                   :options=""pageOptions""
                                   size=""sm""></b-form-select>
                </b-form-group>
            </b-col>

            <b-col sm=""7"" md=""6"" class=""my-1"">
                <b-pagination v-model=""currentPage""
                              :total-rows=""totalRows""
                           ");
            WriteLiteral(@"   :per-page=""perPage""
                              align=""fill""
                              size=""sm""
                              class=""my-0""></b-pagination>
            </b-col>
        </b-row>

        <!-- Main table element -->
        <b-table :items=""items""
                 :fields=""fields""
                 :current-page=""currentPage""
                 :per-page=""perPage""
                 :filter=""filter""
                 :filter-included-fields=""filterOn""
                 :sort-by.sync=""sortBy""
                 :sort-desc.sync=""sortDesc""
                 :sort-direction=""sortDirection""
                 :busy=""isBusy""
                 stacked=""md""
                 show-empty
                 small
                 ");
            WriteLiteral(@"@filtered=""onFiltered"">
            <template #table-busy>
                <div class=""text-center text-danger my-2"">
                    <b-spinner class=""align-middle""></b-spinner>
                    <strong>加載中...</strong>
                </div>
            </template>

            <template #cell(name)=""row"">
                {{ row.value.first }} {{ row.value.last }}
            </template>

            <template #cell(actions)=""row"">
                <b-button size=""sm"" ");
            WriteLiteral("@click=\"info(row.item, row.index, $event.target)\" class=\"mr-1\" variant=\"primary\">\r\n                    修改\r\n                </b-button>\r\n                <b-button size=\"sm\" ");
            WriteLiteral(@"@click=""row.toggleDetails"" variant=""success "">
                    {{ row.detailsShowing ? '關閉' : '詳細' }}
                </b-button>
            </template>

            <template #row-details=""row"">
                <b-card>
                    <ul>
                        <li v-for=""(value, key) in row.item"" :key=""key"">{{ key }}: {{ value }}</li>
                    </ul>
                </b-card>
            </template>
        </b-table>

        <!-- Info modal -->
        <b-modal :id=""infoModal.id"" :title=""infoModal.title"" ok-only ");
            WriteLiteral("@hide=\"resetInfoModal\">\r\n            <pre>{{ infoModal.content }}</pre>\r\n        </b-modal>\r\n    </b-container>\r\n</div>\r\n\r\n\r\n");
            DefineSection("endJS", async() => {
                WriteLiteral(@"
    <script>
        let vm;
        let item;
        vm = new Vue({
            el: ""#app"",
            data: {
                isBusy: true,
                items: [],
                fields: [
                    { key: 'orderID', label: '訂單編號', sortable: true, sortDirection: 'desc' },
                    { key: 'memberID', label: '會員編號', sortable: true, sortDirection: 'desc' },
                    { key: 'fullName', label: '訂單人姓名', sortable: false, sortDirection: 'desc' },
                    { key: 'storeName', label: '分店', sortable: false, sortDirection: 'desc' },
                    { key: 'phone', label: '聯絡電話', sortable: false, sortDirection: 'desc' },
                    { key: 'email', label: '聯絡信箱', sortable: false, sortDirection: 'desc' },
                    //{ key: 'TotalAmount', label: '訂單總額', sortable: true, sortDirection: 'desc' },
                    { key: 'orderStatusID', label: '付款狀態', sortable: true, sortDirection: 'desc' },
                    { key: 'goodsStatusID");
                WriteLiteral(@"', label: '出貨狀態', sortable: true, sortDirection: 'desc' },
                    { key: 'orderDate', label: '成立時間', sortable: true, sortDirection: 'desc' },

                    //{ key: 'age', label: 'Person age', sortable: true, class: 'text-center' },

                    //{
                    //    key: 'isActive',
                    //    label: 'Is Active',
                    //    formatter: (value, key, item) => {
                    //        return value ? 'Yes' : 'No'
                    //    },
                    //    sortable: true,
                    //    sortByFormatted: true,
                    //    filterByFormatted: true
                    //},
                    { key: 'actions', label: '管理' }
                ],
                totalRows: 1,
                currentPage: 1,
                perPage: 5,
                pageOptions: [5, 10, 15, { value: 100, text: ""Show a lot"" }],
                sortBy: '',
                sortDesc: false,
                sort");
                WriteLiteral(@"Direction: 'asc',
                filter: null,
                filterOn: [],
                infoModal: {
                    id: 'info-modal',
                    title: '',
                    content: ''
                }
            },
            computed: {
                sortOptions() {
                    // Create an options list from our fields
                    return this.fields
                        .filter(f => f.sortable)
                        .map(f => {
                            return { text: f.label, value: f.key }
                        })
                }
            },
            mounted() {
                // Set the initial number of items
                this.totalRows = this.items.length
            },
            methods: {
                info(item, index, button) {
                    this.infoModal.title = `Row index: ${index}`
                    this.infoModal.content = JSON.stringify(item, null, 2)
                    this.$root.$emit('b");
                WriteLiteral(@"v::show::modal', this.infoModal.id, button)
                },
                resetInfoModal() {
                    this.infoModal.title = ''
                    this.infoModal.content = ''
                },
                onFiltered(filteredItems) {
                    // Trigger pagination to update the number of buttons/pages due to filtering
                    this.totalRows = filteredItems.length
                    this.currentPage = 1
                }
            },
            watch: {
                items: function () {
                    this.isBusy = !this.isBusy
                }
            },
        });

        const Url = ""/api/OrderApi""
        function LoadData() {
            fetch(Url,
                {
                    method: ""Get"",
                    headers: {
                        'Content-Type': 'application/json'
                    },

                }).then(res => res.json())
                .then(result => {
                    vm.$da");
                WriteLiteral("ta.items = result;\r\n                })\r\n                .catch(ex => {\r\n                    console.log(\"錯了\");\r\n                })\r\n        };\r\n\r\n        $(document).ready(function () {\r\n            LoadData();\r\n        });\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
